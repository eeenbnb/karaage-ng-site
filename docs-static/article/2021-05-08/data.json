{"2021-05-08":"# React Component を wrap する Angular component を作成する\n\n## はじめに\nUIだけでもReactで書いておけばNext.jsに移行するとき楽なんじゃないかなという妄想から始めた。\nAngularライブラリの恩恵を受けつつReactを使えるのでわりといい気がする。\n\n## AngularCompoentでReactをwrapする\n\nプロジェクトにReactを追加する。\n```bash\nnpm install --save react react-dom\nnpm install --save-dev @types/react @types/react-dom\n\n# お好みで\nnpm install --save styled-components\nnpm install --save-dev @types/styled-components\n```\n\nmoduleとcomponentを作成する。\n```bash\nnpx ng g module ui/react-wrapper\nnpx ng g component ui/react-wrapper/react-wrapper\n```\n\n`module` の `export` でcomponentがimport先で使えるように設定する\n```typescript\n@NgModule({\n  ...\n  exports: [\n    ReactWrapperComponent\n  ],\n})\nexport class ReactWrapperModule { }\n```\n\n一旦 `state` と `prop` を忘れてとりあえずレンダリングされるwrapper compoentを実装する。\n```typescript\nimport { Component, OnInit, AfterViewInit, OnDestroy, Input, ElementRef } from '@angular/core';\n\nimport * as React from 'react';\nimport * as ReactDOM from 'react-dom';\n\n@Component({\n  selector: 'react-wrapper',\n  template: ''\n})\nexport class ReactWrapperComponent implements OnInit, AfterViewInit, OnDestroy {\n  @Input() reactCompoent:React.Component | any;\n\n  constructor(\n    private elementRef:ElementRef\n  ) { }\n\n  ngOnInit(): void {\n  }\n\n  ngAfterViewInit(): void {\n    ReactDOM.render(\n      React.createElement(this.reactCompoent),\n      this.elementRef.nativeElement\n    )\n  }\n\n  ngOnDestroy(): void {\n    ReactDOM.unmountComponentAtNode(\n      this.elementRef.nativeElement\n    );\n  }\n\n}\n```\n\n## 使用例\n```bash\nnpx ng g module ui/react-card\nnpx ng g component ui/react-card/react-card\nmkdir src/app/ui/react-card/reaat-item\ntouch src/app/ui/react-card/reaat-item/react-card.tsx\n```\n\n`*.tsx` ファイルを `import` できるように `tsconfig.app.json` を変更。\n\n```json\n{\n  ...\n  \"include\": [\n    \"src/**/*.d.ts\"\n    \"src/**/*.tsx\"\n  ],\n  ...\n}\n```\n\n`tsconfig.json` に以下を追加。\n\n```json\n{\n  ...\n  \"compilerOptions\": {\n    \"jsx\": \"react\",\n  }\n  ...\n}\n```\n\n`react-card.module` で先程作成したWrapper Componentをimportする。\n\n```typescript\nimport { ReactWrapperModule } from '../react-wrapper/react-wrapper.module'\n\n@NgModule({\n  ...\n  imports: [\n    ...\n    ReactWrapperModule\n  ],\n  ...\n  exports: [\n    ReactCardComponent\n  ],\n})\nexport class ReactCardModule { }\n```\n\n適当にReact Componentを作成。\n\n```tsx\nimport * as React from 'react';\nimport styled from 'styled-components';\n\ntype prop = {}\n\nconst Wrapper = styled.div`\n  padding: var(--size-itemInnerPadding);\n  background-color: var(--color-Main);\n  border: 3px solid var(--color-Paragraph);\n  border-radius: var(--size-cardBorder);\n`\n\nexport const RCComponent:React.FC<prop> = prop => {\n  return (\n    <Wrapper>\n      sample text.\n    </Wrapper>\n  );\n}\n```\n\ncompoent側でtsxを読み込み、Wrapper Componentに渡す。\n```html\n<react-wrapper\n  [reactCompoent]=\"reactCompoent\"\n>\n</react-wrapper>\n```\n\n```typescript\nimport { RCComponent } from '../reaat-item/react-card';\n\n@Component({\n  selector: 'react-card',\n  templateUrl: './react-card.component.html',\n  styleUrls: ['./react-card.component.scss']\n})\nexport class ReactCardComponent implements OnInit {\n  reactCompoent = RCComponent;\n  ...\n}\n```\n\n## 動作\n[ここ](./test-page)で確認できる。\n\n## 所感\n- ui コンポーネントをReactで書くことができるので柔軟な開発環境を構築できるのではないかと\n  - ~~ここまでやるならAngularですべて完結したほうが良い~~\n- `prop` と `state` 対応をそのうちする。\n  - 当ブログで使用してるComponentをとりあえずReactに置き換えてみる。\n"}