{"2021-05-09":"# React Component を wrap する Angular component を作成する part.2\n\n<div class=\"info\">\n  <p class=\"info__date\">\n    2021/05/09\n  </p>\n  <div class=\"info__tags\">\n    <p class=\"info__tags__one\">Angular</p>\n    <p class=\"info__tags__one\">React.js</p>\n  </div>\n</div>\n\n## `<ng-content>` を `prop.children` で参照できるように\n`dangerouslySetInnerHTML` を使って `HTMLElement` を `string` に変換後挿入。\n\n```typescript\nimport * as React from 'react';\nimport * as ReactDOM from 'react-dom';\n\n@Component({\n  selector: 'react-wrapper',\n  template: '<div #content style=\"display:none;\"><ng-content></ng-content></div> <div #render></div>'\n})\nexport class ReactWrapperComponent implements OnInit, AfterViewInit, OnDestroy {\n  @ViewChild(\"content\") content?:ElementRef;\n  @ViewChild(\"render\") render?:ElementRef;\n\n  @Input() reactCompoent:React.Component<any> | any;\n  @Input() prop:any = {};\n\n  constructor() { }\n\n  ...\n\n  ngAfterViewInit(): void {\n    let childrenText =\n      Array.from(\n        this.content?.nativeElement.children\n      )\n      .map(\n        (d:any) => d.outerHTML\n      )\n      .join(\"\");\n\n    ReactDOM.render(\n      React.createElement(\n        this.reactCompoent,\n        this.prop,\n        React.createElement('div',{\n          dangerouslySetInnerHTML:{__html:childrenText}\n        })\n      ),\n      this.render?.nativeElement\n    )\n  }\n\n  ...\n}\n\n```\n\n## sample\n\n```html\n<react-wrapper\n  [reactCompoent]=\"reactCompoent\"\n>\n  <p> sample text</p>\n</react-wrapper>\n```\n\n```tsx\nimport * as React from 'react';\n\ntype prop = {}\n\nexport const ReactCompoent:React.FC<prop> = prop => {\n  return (\n    <div>\n      <p>\n        inner: text\n      </p>\n      {prop.children}\n    </div>\n  );\n}\n```\n\n## 終わりに\ndomが多くなるからこの方法やめた。\nreact側でやることにする。\n"}