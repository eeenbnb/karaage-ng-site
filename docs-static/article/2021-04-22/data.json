{"2021-04-22":"# Intersection Observerを使って表示されたときに処理をする\n<div class=\"info\">\n  <p class=\"info__date\">\n    2021/04/22\n  </p>\n  <div class=\"info__tags\">\n    <p class=\"info__tags__one\">Angular</p>\n  </div>\n</div>\n\nあるアイテムが表示されたときに色々したい。例えば\n\n\n- 画像が画面上に表示されたら取得して表示\n- リスト要素の表示されていないときの非表示等(バーチャルスクロール)\n- リスト要素の最後の要素が表示されたときにデータを取得する(Infinite Scroll)\n\nhttps://developer.mozilla.org/ja/docs/Web/API/Intersection_Observer_API\n\n## Angular component\n\n```javaScript\nimport { Component, OnInit, AfterViewInit, ElementRef, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'item-intersection-observer',\n  templateUrl: './item-intersection-observer.component.html',\n  styleUrls: ['./item-intersection-observer.component.scss']\n})\nexport class ItemIntersectionObserverComponent implements OnInit, AfterViewInit {\n  @Output() viewEvent:EventEmitter<{}> = new EventEmitter<{}>();\n\n  constructor(\n    private elementRef:ElementRef\n  ) { }\n\n  ngOnInit(): void {\n  }\n\n  ngAfterViewInit(): void {\n    let observer =\n      new IntersectionObserver(\n        (entries)=>{\n          entries.forEach((entry: any) => {\n            if(!entry.isIntersecting) return;\n            this.viewEvent.emit();\n          }\n        )\n      });\n    observer.observe(this.elementRef.nativeElement);\n  }\n}\n```\n\n## 使用例\n```html\n<item-intersection-observer (viewEvent)=\"onView()\"></item-intersection-observer>\n```\n\n```javaScript\nonView(){\n  ...\n}\n```\n\n## polyfill\nhttps://caniuse.com/intersectionobserver  \n対応ブラウザ次第ではあるけどpolyfillを入れることで未対応ブラウザでも使用できる。\n\n```bash\nnpm install intersection-observer\n```\n\n```javaScript\nimport 'intersection-observer';\n```\n"}