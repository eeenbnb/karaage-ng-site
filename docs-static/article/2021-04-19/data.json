{"2021-04-19":"# パンくずリストの追加と構造化データの生成\n<div class=\"info\">\n  <p class=\"info__date\">\n    2021/04/19\n  </p>\n  <div class=\"info__tags\">\n    <p class=\"info__tags__one\">Angular</p>\n  </div>\n</div>\n\n## はじめに\nパンくずリストを作成する。  \nページヘッダーの下辺りに表示する。  \n\n## パンくずリストとは?\n`ホーム > 記事 > タイトル` みたいなやつ。  \n\n## 構造化データとは？\ngoogle等の検索結果に表示するときになんかかっこよく表示してくれるやつ。  \nhttps://search.google.com/test/rich-results  \nこのページで確認することができる。  \n\n実装的な話をすると  \n- `JSON-LD`\n  - headerにデータを挿入する\n- `RDFa`\n  - htmlのelementにattributeとして挿入する。\n- `microdata`\n  - 上記と同様、プロパティネームだけ違う。\n\nまあ詳しくは以下のページに書いてある。  \nhttps://developers.google.com/search/docs/data-types/breadcrumb?hl=ja\n\n今回はコンポーネント内に内包させたいので `microdata` を使用する。\n\n## AngularのComponentに構造化データを挿入\n`microdata` を使用するのでHTML上に生成する。\n\n```html\n<ol class=\"breadcrumb\" itemscope itemtype=\"https://schema.org/BreadcrumbList\">\n  <ng-container *ngFor=\"let breadcrumb of breadcrumbs;let i = index\">\n    <li class=\"breadcrumb__item\" itemprop=\"itemListElement\" itemscope itemtype=\"https://schema.org/ListItem\">\n      <a itemprop=\"item\" [routerLink]=\"breadcrumb.path\">\n        <span itemprop=\"name\">{{breadcrumb.name}}</span>\n      </a>\n      <meta itemprop=\"position\" [content]=\"i\"/>\n    </li>\n  </ng-container>\n</ol>\n```\n\n```javascript\nimport { Component, OnInit, OnDestroy } from '@angular/core';\nimport { Subscription } from 'rxjs';\n\nimport { BreadcrumbService, Breadcrumbs } from '../../../service/breadcrumb/breadcrumb.service'\n\n@Component({\n  selector: 'item-breadcrumb',\n  templateUrl: './item-breadcrumb.component.html',\n  styleUrls: ['./item-breadcrumb.component.scss']\n})\nexport class ItemBreadcrumbComponent implements OnInit, OnDestroy {\n  breadcrumbs:Breadcrumbs = [];\n  breadcrumbsSubscription:Subscription;\n\n  constructor(\n    private breadcrumbService:BreadcrumbService\n  ) {\n    this.breadcrumbsSubscription = this.breadcrumbService.getBreadcrumbsChageEvent().subscribe(\n      (breadcrumbs:Breadcrumbs)=>{\n        console.log(\"breadcrumbs\");\n      }\n    );\n  }\n\n  ngOnInit(): void {\n\n  }\n\n  ngOnDestroy(): void {\n    this.breadcrumbsSubscription.unsubscribe();\n  }\n}\n```\n\nrouterを使用する場合はコンポーネントにデータをservice経由で送信する。\n\n```javascript\nimport { Injectable } from '@angular/core';\nimport { Subject, Observable } from 'rxjs';\n\nexport interface Breadcrumb{\n  path:string[],\n  name:string,\n}\nexport type Breadcrumbs = Breadcrumb[];\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class BreadcrumbService {\n  private setItem:Breadcrumbs = []\n  private sharedDataSource = new Subject<Breadcrumbs>();\n  private sharedDataSourceObservable = this.sharedDataSource.asObservable();\n\n  constructor() { }\n\n  getBreadcrumbsChageEvent():Observable<Breadcrumbs>{\n    return this.sharedDataSourceObservable;\n  }\n\n  setBreadcrumbs(breadcrumbs:Breadcrumbs):void{\n    this.setItem = breadcrumbs;\n    this.sharedDataSource.next(breadcrumbs);\n  }\n\n  getSetBreadcrumbs(){\n    return this.setItem;\n  }\n}\n```\n\n使用例\n```HTML\n<item-breadcrumb></item-breadcrumb>\n```\n\n```javascript\n@Component({\n  ...\n})\nexport class HogeComponent implements OnInit {\n  constructor(\n    private breadcrumbService:BreadcrumbService\n  ) { }\n\n  ngOnInit(): void {\n    this.breadcrumbService.setBreadcrumbs([\n      { path:[\"/\"], name:\"top\" },\n      { path:[\"/\",\"hoge\"], name:\"hoge\" },\n      { path:[\"/\",\"hoge\",\"fuga\"], name:\"fuga\" },\n    ])\n  }\n}\n\n```\n"}